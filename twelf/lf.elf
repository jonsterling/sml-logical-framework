sort : type.
tm : sort -> type.

=> : sort -> sort -> sort.
%infix right 6 =>.

abs : (tm S -> tm T) -> tm (S => T).

% A term [J : jdg S] is a judgment which will synthesize evidence of sort [S].
jdg : sort -> type.

% hypothetico-general judgments
>> : {J : jdg S} (tm S -> jdg T) -> jdg (S => T).
%infix right 10 >>.

% [J ~> E] means that [J] is valid, synthesizing evidence [E].
~> : jdg S -> tm S -> type.
%infix right 8 ~>.
%mode ~> +J -E.

% [E <~ J] means that [E] is evidence, namely of [J].
<~ : tm S -> jdg S -> type.
%infix left 5 <~.
%mode <~ +E -J1.

fam-unapply : jdg T -> tm S -> (tm S -> jdg T) -> type.
%mode fam-unapply +JT -E -Fam.


% The difference between [J ~> E] and [E <~ J] is *mode*.
% When hypothesizing a judgment [J], as below, we add both [J ~> x]
% and [x <~ J] to the context so that we can "remember" what [x] 
% was hypothesized to prove in a well-moded way.

% We provide basic "structural" rules for proofs.
>>/i
   : J1 >> J2 ~> abs F
      <- {x} 
         (J1 ~> x) 
         -> (x <~ J1)
         -> fam-unapply (J2 x) x J2
         -> J2 x ~> F x.


% a basic lambda calculus.
exp : sort.
triv : sort.

* : tm triv.

bool : tm exp.
tt : tm exp.
ff : tm exp.
pair : tm exp -> tm exp -> tm exp.
lam : tm (exp => exp) -> tm exp.
ap : tm exp -> tm exp -> tm exp.
dfun : tm exp -> tm (exp => exp) -> tm exp.
dpair : tm exp -> tm (exp => exp) -> tm exp.
fst : tm exp -> tm exp.
snd : tm exp -> tm exp.

% Now we define two basic refinement judgments: that some term is a type, and that
% some term is an inhabited type.
ty : tm exp -> tm exp -> jdg triv.
eq : tm exp -> tm exp -> tm exp -> jdg triv.
inh : tm exp -> jdg exp.
syn : tm exp -> jdg exp.
dfun-dom : tm exp -> jdg exp.
dfun-cod : tm exp -> jdg (exp => exp).

dfun-dom/unify
   : dfun-dom (dfun A _) ~> A.

dfun-cod/unify
   : dfun-cod (dfun _ B) ~> B.

ty/bool 
   : ty bool bool ~> *.
ty/dfun
   : ty (dfun A1 (abs B1)) (dfun A2 (abs B2)) ~> *
      <- ty A1 A2 ~> _
      <- inh A1 >> ([x] ty (B1 x) (B2 x)) ~> _.
ty/dpair
   : ty (dpair A1 (abs B1)) (dpair A2 (abs B2)) ~> *
      <- ty A1 A2 ~> _
      <- inh A1 >> ([x] ty (B1 x) (B2 x)) ~> _.

inh/tt
   : inh bool ~> tt.

inh/ff
   : inh bool ~> ff.

inh/pair 
   : inh (dpair A (abs B)) ~> pair M N
      <- (inh A >> [x] ty (B x) (B x)) ~> _
      <- inh A ~> M
      <- inh (B M) ~> N.

inh/lam
   : inh (dfun A (abs B)) ~> lam F
      <- ty A A ~> _
      <- inh A >> ([x] inh (B x)) ~> F.

inh/spread
   : inh CZ ~> F (fst Z) (snd Z)
      <- fam-unapply (inh CZ) Z C
      <- Z <~ inh (dpair A (abs B))
      <- (inh A >> [x] inh (B x) >> [y] C (pair x y)) ~> abs [x] abs [y] F x y.

eq/tt
   : eq bool tt tt ~> *.
eq/ff
   : eq bool ff ff ~> *.
eq/pair
   : eq (dpair A (abs B)) (pair M1 N1) (pair M2 N2) ~> *
      <- (inh A >> [x] ty (B x) (B x)) ~> _
      <- eq A M1 M2 ~> _
      <- eq (B M1) N1 N2 ~> _.
eq/lam
   : eq (dfun A (abs B)) (lam (abs F1)) (lam (abs F2)) ~> *
      <- inh A >> ([x] eq (B x) (F1 x) (F2 x)) ~> _.

eq/syn
   : eq A M M ~> *
      <- syn M ~> A.

syn/hyp 
   : syn R ~> A
      <- R <~ inh A.

syn/ap
  : syn (ap R M) ~> B M
     <- syn R ~> T
     <- dfun-dom T ~> A
     <- dfun-cod T ~> abs B
     <- eq A M M ~> _.


%solve test : inh (dfun bool (abs [x] dfun bool (abs [y] bool))) ~> _.
